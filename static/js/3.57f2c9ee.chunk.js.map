{"version":3,"sources":["components/Messages/Messenger.module.css","assets/avaImg/close.svg","components/Messages/Dialog.jsx","components/Messages/MessagesList.jsx","components/Messages/Messenger.jsx","components/Messages/Messenger.Container.jsx"],"names":["module","exports","Dialog","props","className","classes","itemD","dialogMessage","span","message","img","onClick","window","confirm","deleteMessage","id","src","udalit","alt","MessagesList","item","to","activeClassName","active","dialogStyles","names","dialogList","lastmessage","maxLength500","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","textareaButton","Field","component","Textarea","placeholder","cols","name","validate","Messenger","useState","showDialogs","setShowMessage","ShowMessage","dialog","messagesList","addMessageC","dialogData","map","d","messagesData","m","dialogname","ava","Dialogs","showMessage","messagelist","dialog2","value","messageBody","compose","connect","state","newMLetter","MessagesPage","dispatch","addMessageAC","withAuthRedirect"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,2BAA2B,YAAc,+BAA+B,cAAgB,iCAAiC,IAAM,uBAAuB,OAAS,0BAA0B,KAAO,wBAAwB,MAAQ,yBAAyB,OAAS,0BAA0B,aAAe,gCAAgC,QAAU,2BAA2B,eAAiB,kCAAkC,YAAc,+BAA+B,YAAc,+BAA+B,KAAO,0B,oBCDhiBD,EAAOC,QAAU,IAA0B,mC,0ICqB5BC,EAjBA,SAACC,GAQZ,OACI,yBAAKC,UAAWC,IAAQC,OACpB,yBAAKF,UAAWC,IAAQE,eACpB,6BAAK,0BAAMH,UAAWC,IAAQG,MAAOL,EAAMM,SAAe,0BAAML,UAAWC,IAAQK,IAAKC,QAT9E,WACdC,OAAOC,QAAQ,uGACfV,EAAMW,cAAcX,EAAMY,MAO0F,yBAAKC,IAAKC,IAAQC,IAAI,gB,QCGvIC,EAbM,SAAChB,GAClB,OACI,yBAAKC,UAAWC,IAAQe,MACpB,6BACI,kBAAC,IAAD,CAASC,GAAI,cAAgBlB,EAAMY,GAAIO,gBAAiBjB,IAAQkB,QAC5D,yBAAKnB,UAAWC,IAAQmB,cACpB,0BAAMpB,UAAWC,IAAQoB,OAAQtB,EAAMuB,YAAmBvB,EAAMO,IAAI,yBAAKN,UAAWC,IAAQsB,aAAxB,iH,kDCsCtFC,EAAeC,YAAiB,KAchCC,EAAsBC,YAAU,CAAEC,KAAM,aAAlBD,EAZL,SAAC5B,GACpB,OACI,0BAAM8B,SAAU9B,EAAM+B,cAClB,yBAAK9B,UAAWC,IAAQ8B,gBACpB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,YAAY,iIAA6BC,KAAK,KAAKC,KAAK,cAAcC,SAAU,CAACd,KAC7G,+FASDe,EAvDG,SAACxC,GAAW,IAAD,EAEayC,oBAAS,GAFtB,mBAElBC,EAFkB,KAELC,EAFK,KAInBC,EAAc,WAChBD,GAAgBD,IAGhBG,EAAS7C,EAAM6C,OACfC,EAAe9C,EAAM8C,aACrBC,EAAc/C,EAAM+C,YAEpBC,EAAaH,EAAOI,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAQtC,GAAIsC,EAAEtC,GAAIN,QAAS4C,EAAE5C,QAASK,cAAeX,EAAMW,mBACxFwC,EAAeL,EAAaG,KAAI,SAAAG,GAAC,OAAI,kBAAC,EAAD,CAAcxC,GAAIwC,EAAExC,GAAIW,WAAY6B,EAAEC,WAAY9C,IAAK,yBAAKM,IAAMuC,EAAE7C,IAAY6C,EAAE7C,IAAR+C,WAOnH,OACI,yBAAKrD,UAAWC,IAAQqD,SAClBb,EACE,8BACI,0BAAMzC,UAAWC,IAAQsD,YAAahD,QAASoC,GAA/C,0FACA,yBAAK3C,UAAWC,IAAQuD,aACnBN,IAJG,0BAAMlD,UAAWC,IAAQsD,YAAahD,QAASoC,GAA/C,2GAOhB,yBAAK3C,UAAWC,IAAQ2C,QACpB,yBAAK5C,UAAWC,IAAQwD,SACnBV,EACD,kBAACrB,EAAD,CAAqBG,SAjBnB,SAAC6B,GACfZ,EAAYY,EAAMC,oBCEXC,4BACXC,aArBkB,SAACC,GACnB,MAAO,CACHC,WAAYD,EAAME,aAAaD,WAC/BE,SAAUH,EAAME,aAAaC,SAC7BrB,OAAQkB,EAAME,aAAapB,OAC3BC,aAAciB,EAAME,aAAanB,iBAIhB,SAACoB,GACtB,MAAO,CACHnB,YADG,SACSa,GACRM,EAASC,YAAaP,KAE1BjD,cAJG,SAIWC,GACVsD,EAASvD,YAAcC,SAO/BwD,IAFWP,CAGbrB","file":"static/js/3.57f2c9ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Messenger_Dialogs__tsgjK\",\"messagelist\":\"Messenger_messagelist__2va0j\",\"dialogMessage\":\"Messenger_dialogMessage__YBNIe\",\"img\":\"Messenger_img__2u9fJ\",\"dialog\":\"Messenger_dialog__2LLNG\",\"item\":\"Messenger_item__1qLFf\",\"names\":\"Messenger_names__2GyyF\",\"active\":\"Messenger_active__23_SJ\",\"dialogStyles\":\"Messenger_dialogStyles__3ItkB\",\"dialog2\":\"Messenger_dialog2__16WaV\",\"textareaButton\":\"Messenger_textareaButton__1cWRP\",\"showMessage\":\"Messenger_showMessage__3eROM\",\"lastmessage\":\"Messenger_lastmessage__2q06c\",\"span\":\"Messenger_span__3X1n-\"};","module.exports = __webpack_public_path__ + \"static/media/close.1175686f.svg\";","import React from 'react';\r\nimport classes from './Messenger.module.css';\r\nimport udalit from '../../assets/avaImg/close.svg';\r\n\r\nconst Dialog = (props) => {\r\n\r\n    const deleteMessage = () => {\r\n        if (window.confirm('удалить сообщение?')) {\r\n            props.deleteMessage(props.id)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.itemD}>\r\n            <div className={classes.dialogMessage}>\r\n                <div><span className={classes.span}>{props.message}</span><span className={classes.img} onClick={deleteMessage}><img src={udalit} alt=\"delete\" /></span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n;\r\nexport default Dialog;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './Messenger.module.css';\r\n\r\n\r\nconst MessagesList = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div>\r\n                <NavLink to={`/Messenger/` + props.id} activeClassName={classes.active} >\r\n                    <div className={classes.dialogStyles}>\r\n                        <span className={classes.names}>{props.dialogList}</span>{props.img}<div className={classes.lastmessage}>последнее сообщениe</div>\r\n                    </div></NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MessagesList;","import React, { useState } from 'react';\r\nimport Dialog from './Dialog';\r\nimport MessagesList from './MessagesList';\r\nimport classes from './Messenger.module.css'\r\nimport ava from '../../assets/avaImg/mal2.jpg';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Form, Textarea } from '../coummon/Prilouder/formControls/formControls';\r\nimport { maxLengthCreator, required } from '../../Utils/validator/validator';\r\n\r\n\r\nconst Messenger = (props) => {\r\n\r\n    const [showDialogs, setShowMessage] = useState(false);\r\n\r\n    const ShowMessage = () => {\r\n        setShowMessage(!showDialogs)\r\n    }\r\n\r\n    let dialog = props.dialog;\r\n    let messagesList = props.messagesList;\r\n    let addMessageC = props.addMessageC\r\n\r\n    let dialogData = dialog.map(d => <Dialog id={d.id} message={d.message} deleteMessage={props.deleteMessage} />);\r\n    let messagesData = messagesList.map(m => <MessagesList id={m.id} dialogList={m.dialogname} img={<img src={!m.img ? ava : m.img} />} />)\r\n\r\n    let addMessages = (value) => {\r\n        addMessageC(value.messageBody)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n            {!showDialogs ? <span className={classes.showMessage} onClick={ShowMessage}>показать сообщения</span> :\r\n                <span>\r\n                    <span className={classes.showMessage} onClick={ShowMessage}>cкрыть сообщения</span>\r\n                    <div className={classes.messagelist}>\r\n                        {messagesData}\r\n                    </div>\r\n                </span>}\r\n            <div className={classes.dialog}>\r\n                <div className={classes.dialog2}>\r\n                    {dialogData}\r\n                    <AddMessageReduxForm onSubmit={addMessages} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst maxLength500 = maxLengthCreator(500);\r\n\r\nconst addMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.textareaButton}>\r\n                <Field component={Textarea} placeholder=\"Напишите ваше сообщние ...\" cols=\"80\" name=\"messageBody\" validate={[maxLength500,]} />\r\n                <button>Отправить</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\nconst AddMessageReduxForm = reduxForm({ form: \"messenger\" })(addMessageForm);\r\n\r\nexport default Messenger;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../Hoc/withAuthRedirect';\r\nimport { addMessageAC, deleteMessage } from '../../redux/messagesReducer';\r\nimport Messenger from './Messenger';\r\n\r\n\r\n\r\nlet MapStateToProps = (state) => {\r\n    return {\r\n        newMLetter: state.MessagesPage.newMLetter,\r\n        dispatch: state.MessagesPage.dispatch,\r\n        dialog: state.MessagesPage.dialog,\r\n        messagesList: state.MessagesPage.messagesList\r\n    }\r\n};\r\n\r\nlet MapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessageC(messageBody) {\r\n            dispatch(addMessageAC(messageBody))\r\n        },\r\n        deleteMessage(id) {\r\n            dispatch(deleteMessage(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(MapStateToProps, MapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messenger)\r\n\r\n"],"sourceRoot":""}