{"version":3,"sources":["components/Messages/Messenger.module.css","assets/avaImg/close.svg","components/Messages/Dialog.jsx","components/Messages/MessagesList.jsx","components/Messages/AddForm.jsx","components/Messages/Messenger.jsx","components/Messages/Messenger.Container.tsx"],"names":["module","exports","Dialog","props","className","classes","itemD","dialogMessage","messages","map","message","key","id","author","mymessage","span","src","name","img","ava","alt","onClick","messagId","window","confirm","deleteMessage","index","udalit","MessagesList","item","dialogStyles","names","dialogList","AddMessageForm","useForm","mode","register","handleSubmit","errors","formState","onSubmit","data","addMessageC","Math","random","dialogId","textareaButton","ref","required","cols","placeholder","redBorder","withRouter","useState","personDialog","setpersonDialog","match","params","useEffect","m","messagesList","filter","el","dialogname","dialog","messagesData","to","getPersonDialog","activeClassName","active","Dialogs","style","display","backgroundColor","boxShadow","marginRight","messagelist","curentDialog","opacity","fontWeight","d","dialog2","path","render","compose","connect","state","profile","ProfilePage","newMLetter","MessagesPage","dispatch","messageBody","addMessageAC","withAuthRedirect","Messenger"],"mappings":"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","file":"static/js/3.9267e085.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Messenger_Dialogs__HmSzy\",\"messagelist\":\"Messenger_messagelist__1VyEc\",\"itemD\":\"Messenger_itemD__2VJGz\",\"redBorder\":\"Messenger_redBorder__10zEp\",\"dialogMessage\":\"Messenger_dialogMessage__EsLhl\",\"img\":\"Messenger_img__2IXdo\",\"dialog\":\"Messenger_dialog__3vaic\",\"item\":\"Messenger_item__VMjz5\",\"names\":\"Messenger_names__1-FJi\",\"active\":\"Messenger_active__33VUf\",\"dialogStyles\":\"Messenger_dialogStyles__333aV\",\"dialog2\":\"Messenger_dialog2__3neDp\",\"textareaButton\":\"Messenger_textareaButton__3HSwF\",\"showMessage\":\"Messenger_showMessage__3ZIJi\",\"lastmessage\":\"Messenger_lastmessage__3c5kv\",\"span\":\"Messenger_span__2FnUH\",\"mymessage\":\"Messenger_mymessage__2HR3g\",\"curentDialog\":\"Messenger_curentDialog__3DnXg\",\"name\":\"Messenger_name__3o23r\"};","module.exports = __webpack_public_path__ + \"static/media/close.1175686f.svg\";","import React from 'react';\r\nimport classes from './Messenger.module.css';\r\nimport udalit from '../../assets/avaImg/close.svg';\r\nimport ava from '../../assets/avaImg/mal2.jpg'\r\n\r\nconst Dialog = (props) => {\r\n\r\n    const deleteMessage = (messagId) => {\r\n        if (window.confirm('удалить сообщение?')) {\r\n            props.deleteMessage(props.index, messagId)\r\n        }\r\n    }\r\n    return (\r\n        <div className={classes.itemD}>\r\n            <div className={classes.dialogMessage}>\r\n                {props.messages.map(message =>\r\n                    <div key={message.id} className=\"dialog_container\">\r\n                        <span className={message.author === 'me' ? classes.mymessage : classes.span}>\r\n                            <img src={message.author === props.name ? props.img : ava} alt=\"\" /> {message.message}\r\n                        </span>\r\n                        <span className={classes.img} onClick={() => deleteMessage(message.id)}>\r\n                            <img src={udalit} alt=\"delete\" />\r\n                        </span>\r\n                    </div>)}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n;\r\nexport default Dialog;","import React from 'react';\r\nimport classes from './Messenger.module.css';\r\n\r\n\r\nconst MessagesList = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div>\r\n                <div className={classes.dialogStyles}>\r\n                    <div className={classes.names}>{props.dialogList}</div>{props.img}\r\n                    {/* <div className={classes.lastmessage}>последнее сообщениe</div> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MessagesList;","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport classes from './Messenger.module.css';\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n    } = useForm({ mode: 'onChange' });\r\n\r\n    function onSubmit(data) {\r\n        props.addMessageC({ id: Math.random() * 5, message: data.message, author: 'me' }, props.dialogId)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className={classes.textareaButton}>\r\n                    <textarea\r\n                        name='message'\r\n                        ref={register({ required: 'пустое поле' })}\r\n                        cols=\"70\"\r\n                        placeholder={errors.message ? 'error: пустое поле' : 'ваше сообщение'}\r\n                        className={errors.message ? classes.redBorder : ''}\r\n                    />\r\n                    <button>Отправить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default AddMessageForm;","import React, { useEffect, useState } from 'react';\r\nimport Dialog from './Dialog';\r\nimport MessagesList from './MessagesList';\r\nimport classes from './Messenger.module.css'\r\nimport ava from '../../assets/avaImg/mal2.jpg';\r\nimport { NavLink, Route } from 'react-router-dom';\r\nimport { withRouter } from 'react-router';\r\nimport AddMessageForm from './AddForm';\r\n\r\n\r\nconst Messenger = (props) => {\r\n\r\n    const [personDialog, setpersonDialog] = useState(null);\r\n\r\n    const getPersonDialog = (m) => {\r\n        setpersonDialog({ dialogname: m.dialogname, img: m.img })\r\n    }\r\n\r\n    let dialogId = props.match.params.dialogId;\r\n\r\n    useEffect(() => {\r\n        if (dialogId) {\r\n            const m = [...props.messagesList].filter(el => el.id === dialogId)\r\n            setpersonDialog({ dialogname: m[0].dialogname, img: m[0].img })\r\n        } else {\r\n            const m = [...props.messagesList].filter(el => el.id === dialogId)\r\n            setpersonDialog({ dialogname: null, img: ava })\r\n        }\r\n    }, [])\r\n\r\n\r\n    let dialog = props.messagesList;\r\n    let messagesList = props.messagesList;\r\n\r\n    let messagesData = messagesList.map((m, index) => <NavLink to={`/Messenger/` + m.id} key={m.id} onClick={() => getPersonDialog(m)} activeClassName={classes.active} ><MessagesList key={index} id={m.id} dialogList={m.dialogname} img={<img src={!m.img ? ava : m.img} />} /></NavLink>)\r\n\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n            <span style={{ display: \"inline-block\", backgroundColor: \"white\", boxShadow: \"0 0 0 0.5px rgb(0,0,0, 0.5)\", marginRight: \"-5px\" }}>\r\n                {/* <span className={classes.showMessage} onClick={ShowMessage}>cкрыть сообщения</span> */}\r\n                <div className={classes.messagelist}>\r\n                    {messagesData}\r\n                </div>\r\n            </span>\r\n            {/* } */}\r\n            <div className={classes.dialog}>\r\n                {\r\n                    personDialog ?\r\n                        <div className={classes.curentDialog}>\r\n                            <div className={classes.name}>\r\n                                <span style={{ opacity: '0.7', fontWeight: 'normal' }}>{personDialog.dialogname === null ? \"выберите собеседника\" : \"ваша переписка с\"} </span>{personDialog.dialogname}</div>\r\n                            <img src={personDialog.img} alt=\"ava\" />\r\n                        </div> :\r\n                        null\r\n                }\r\n                {\r\n                    dialog.map((d, index) =>\r\n                        <div key={d.id} className={classes.dialog2} >\r\n                            <Route path={\"/Messenger/\" + d.id} render={() =>\r\n                                <Dialog name={d.dialogname} img={d.img} key={index} index={index} id={d.id} messages={d.dialog} deleteMessage={props.deleteMessage} />\r\n                            } />\r\n                            {/* <AddMessageReduxForm dialogId={dialogId} onSubmit={addMessages} /> */}\r\n                            {dialogId ?\r\n                                <AddMessageForm addMessageC={props.addMessageC} dialogId={dialogId} /> :\r\n                                ''\r\n                            }\r\n                        </div>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(Messenger);","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../Hoc/withAuthRedirect';\r\nimport { addMessageAC, deleteMessage, dialogType, messagesListType } from '../../redux/messagesReducer';\r\nimport { AppStateType, DispatchType } from '../../redux/redux-store';\r\nimport { profileType } from '../../types/types';\r\nimport Messenger from './Messenger';\r\n\r\ntype MapStatePropsType = {\r\n    profile: profileType,\r\n    newMLetter: string,\r\n    dialog: Array<dialogType>,\r\n    messagesList: Array<messagesListType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessageC: (messageBody: string, dialogId: string) => void\r\n    deleteMessage: (index: number, id: number) => void\r\n}\r\n\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.ProfilePage.profile,\r\n        newMLetter: state.MessagesPage.newMLetter,\r\n        // dispatch: state.MessagesPage.dispatch,\r\n        dialog: state.MessagesPage.dialog,\r\n        messagesList: state.MessagesPage.messagesList\r\n    }\r\n};\r\n\r\nlet MapDispatchToProps = (dispatch: DispatchType): MapDispatchPropsType => {\r\n    return {\r\n        addMessageC(messageBody, dialogId) {\r\n            dispatch(addMessageAC(messageBody, dialogId))\r\n        },\r\n        deleteMessage(index, id) {\r\n            dispatch(deleteMessage(index, id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(MapStateToProps, MapDispatchToProps),\r\n    withAuthRedirect\r\n)(Messenger)\r\n\r\n"],"sourceRoot":""}